image: registry.gitlab.com/redmic-project/docker/docker-deploy

stages:
  - package
  - test-package
  - deploy

variables:
  CONFLUENT_VERSION: 4.1.2

docker-build-commit-non-master-branches:
  stage: package
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/connector-supplier
  services:
    - docker:dind
  only:
    - branches
  except:
    - master
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${IMAGE_NAME}:${CI_COMMIT_SHA} -t ${IMAGE_NAME}:${CI_COMMIT_REF_NAME}-latest .
    - docker push ${IMAGE_NAME}

docker-build-commit-master-branch:
  stage: package
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/connector-supplier
  services:
    - docker:dind
  only:
    - master
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${IMAGE_NAME}:${CI_COMMIT_SHA} -t ${IMAGE_NAME}:latest .
    - docker push ${IMAGE_NAME}

container-scanning:
  stage: test-package
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  only:
    - branches
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - >
      ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-sast-container-report.json -l clair.log
      -w clair-whitelist.yml ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} || true
  artifacts:
    paths: [gl-sast-container-report.json]

deploy-zookeeper-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: zookeeper
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
  services:
    - docker:dind
  script:
    - create-nets.sh kafka-net
    - export SERVICE=zk-1
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
    - export SERVICE=zk-2
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
    - export SERVICE=zk-3
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: dev/zookeeper
  only:
    - branches
  except:
    - master
  when: manual

deploy-zookeeper-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: zookeeper
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.prod.yml
  services:
    - docker:dind
  script:
    - create-nets.sh kafka-net
    - export SERVICE=zk-1
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
    - export SERVICE=zk-2
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
    - export SERVICE=zk-3
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: pro/zookeeper
  only:
    - master
  when: manual

deploy-kafka-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: kafka
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
    PUBLIC_HOSTNAME: ${DEV_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - export SERVICE=kf-1
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
    - export SERVICE=kf-2
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
    - export SERVICE=kf-3
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
  environment:
    name: dev/kafka
  only:
    - branches
  except:
    - master
  when: manual

deploy-kafka-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: kafka
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.prod.yml
  services:
    - docker:dind
  script:
    - export SERVICE=kf-1
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
    - export SERVICE=kf-2
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
    - export SERVICE=kf-3
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: pro/kafka
  only:
    - master
  when: manual

deploy-connect-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: workers
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    SERVICE: connect
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.dev.yml
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: dev/${SERVICE}
  only:
    - branches
  except:
    - master
  when: manual

deploy-connect-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: workers
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    SERVICE: connect
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.prod.yml
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: pro/${SERVICE}
  only:
    - master
  when: manual

deploy-connector-supplier-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: workers
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    SERVICE: connector-supplier
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/connector-supplier
    IMAGE_TAG: ${CI_COMMIT_SHA}
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.dev.yml
    CONNECT_ADDRS: connect:8083
  services:
    - docker:dind
  script:
    - >
      deploy.sh IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
      CONNECT_ADDRS=${CONNECT_ADDRS} POSTGRES_USER=${POSTGRES_USER} POSTGRES_PASS=${POSTGRES_PASS}
  environment:
    name: dev/${SERVICE}
  only:
    - branches
  except:
    - master
  when: manual

deploy-connector-supplier-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: workers
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    SERVICE: connector-supplier
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/connector-supplier
    IMAGE_TAG: ${CI_COMMIT_SHA}
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.prod.yml
    CONNECT_ADDRS: connect:8083
  services:
    - docker:dind
  script:
    - >
      deploy.sh IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
      CONNECT_ADDRS=${CONNECT_ADDRS} POSTGRES_USER=${POSTGRES_USER} POSTGRES_PASS=${POSTGRES_PASS}
  environment:
    name: pro/${SERVICE}
  only:
    - master
  when: manual

deploy-schema-registry-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: workers
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    SERVICE: schema-registry
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.dev.yml
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: dev/${SERVICE}
  only:
    - branches
  except:
    - master
  when: manual

deploy-schema-registry-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: workers
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    SERVICE: schema-registry
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.prod.yml
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: pro/${SERVICE}
  only:
    - master
  when: manual

deploy-kafka-rest-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: workers
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    SERVICE: kafka-rest
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.dev.yml
    PUBLIC_HOSTNAME: ${DEV_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
  environment:
    name: dev/${SERVICE}
  only:
    - branches
  except:
    - master
  when: manual

deploy-kafka-rest-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: workers
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    SERVICE: kafka-rest
    IMAGE_TAG: ${CONFLUENT_VERSION}
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.prod.yml
    PUBLIC_HOSTNAME: ${PRO_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
  environment:
    name: pro/${SERVICE}
  only:
    - master
  when: manual

deploy-kafka-manager-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: uis
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    IMAGE_TAG: latest
    SERVICE: kafka-manager
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.dev.yml
    PUBLIC_HOSTNAME: ${DEV_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: dev/${SERVICE}
    url: https://kafkamanager.${PUBLIC_HOSTNAME}
  only:
    - branches
  except:
    - master
  when: manual

deploy-kafka-manager-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: uis
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    IMAGE_TAG: latest
    SERVICE: kafka-manager
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.prod.yml
    PUBLIC_HOSTNAME: ${PRO_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME} UI_AUTH=${UI_AUTH}
  environment:
    name: pro/${SERVICE}
    url: https://kafkamanager.${PUBLIC_HOSTNAME}
  only:
    - master
  when: manual

deploy-kafka-topics-ui-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: uis
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    IMAGE_TAG: latest
    SERVICE: kafka-topics-ui
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.dev.yml
    PUBLIC_HOSTNAME: ${DEV_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: dev/${SERVICE}
    url: https://kafkatopicsui.${PUBLIC_HOSTNAME}
  only:
    - branches
  except:
    - master
  when: manual

deploy-kafka-topics-ui-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: uis
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    IMAGE_TAG: latest
    SERVICE: kafka-topics-ui
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.prod.yml
    PUBLIC_HOSTNAME: ${PRO_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
      UI_AUTH=${UI_AUTH}
  environment:
    name: pro/${SERVICE}
    url: https://kafkatopicsui.${PUBLIC_HOSTNAME}
  only:
    - master
  when: manual

deploy-kafka-connect-ui-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: uis
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    IMAGE_TAG: latest
    SERVICE: kafka-connect-ui
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.dev.yml
    PUBLIC_HOSTNAME: ${DEV_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
  environment:
    name: dev/${SERVICE}
    url: https://kafkaconnectui.${PUBLIC_HOSTNAME}
  only:
    - branches
  except:
    - master
  when: manual

deploy-kafka-connect-ui-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: uis
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    IMAGE_TAG: latest
    SERVICE: kafka-connect-ui
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.prod.yml
    PUBLIC_HOSTNAME: ${PRO_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
      UI_AUTH=${UI_AUTH}
  environment:
    name: pro/${SERVICE}
    url: https://kafkaconnectui.${PUBLIC_HOSTNAME}
  only:
    - master
  when: manual

deploy-schema-registry-ui-dev:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: uis
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    IMAGE_TAG: latest
    SERVICE: schema-registry-ui
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.dev.yml
    PUBLIC_HOSTNAME: ${DEV_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
  environment:
    name: dev/${SERVICE}
    url: https://schemaregistryui.${PUBLIC_HOSTNAME}
  only:
    - branches
  except:
    - master
  when: manual

deploy-schema-registry-ui-pro:
  stage: deploy
  variables:
    DOCKER_DRIVER: overlay2
    DEPLOY_DIR_NAME: uis
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    IMAGE_TAG: latest
    SERVICE: schema-registry-ui
    COMPOSE_FILE: docker-compose.${SERVICE}.tmpl.yml:docker-compose.${SERVICE}.prod.yml
    PUBLIC_HOSTNAME: ${PRO_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
      UI_AUTH=${UI_AUTH}
  environment:
    name: pro/${SERVICE}
    url: https://schemaregistryui.${PUBLIC_HOSTNAME}
  only:
    - master
  when: manual
